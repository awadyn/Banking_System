var _user$project$Register$valid_inputs = function (model) {
	return _elm_lang$core$Basics$not(
		_elm_lang$core$Native_Utils.eq(model.password, '') || (!_elm_lang$core$Native_Utils.eq(model.password, model.confirm_password)));
};
var _user$project$Register$validate_confirm = function (model) {
	var confirm_state = _elm_lang$core$Native_Utils.eq(model.password, model.confirm_password) ? '' : 'Passwords Don\'t Match';
	return _elm_lang$html$Html$text(confirm_state);
};
var _user$project$Register$validate_password = function (model) {
	var password_state = _elm_lang$core$Native_Utils.eq(model.password, '') ? 'Password Required' : '';
	return _elm_lang$html$Html$text(password_state);
};
var _user$project$Register$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Register$userDecoder = A3(
	_elm_lang$core$Json_Decode$object2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'New User', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'Error', _elm_lang$core$Json_Decode$string));
var _user$project$Register$userEncoder = function (model) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'password',
				_1: _elm_lang$core$Json_Encode$string(model.password)
			},
				{
				ctor: '_Tuple2',
				_0: 'confirm_password',
				_1: _elm_lang$core$Json_Encode$string(model.confirm_password)
			}
			]));
};
var _user$project$Register$registerUser = F2(
	function (model, api_url) {
		return A2(
			_evancz$elm_http$Http$fromJson,
			_user$project$Register$userDecoder,
			A2(
				_evancz$elm_http$Http$send,
				_evancz$elm_http$Http$defaultSettings,
				{
					verb: 'POST',
					headers: _elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'Content-Type', _1: 'application/json'}
						]),
					url: api_url,
					body: _evancz$elm_http$Http$string(
						A2(
							_elm_lang$core$Json_Encode$encode,
							0,
							_user$project$Register$userEncoder(model)))
				}));
	});
var _user$project$Register$register_url = 'http://localhost:5000/register';
var _user$project$Register$Model = F3(
	function (a, b, c) {
		return {password: a, confirm_password: b, message: c};
	});
var _user$project$Register$init = {
	ctor: '_Tuple2',
	_0: A3(_user$project$Register$Model, '', '', ''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Register$SetInputState = {ctor: 'SetInputState'};
var _user$project$Register$SubmitSuccess = function (a) {
	return {ctor: 'SubmitSuccess', _0: a};
};
var _user$project$Register$SubmitFail = function (a) {
	return {ctor: 'SubmitFail', _0: a};
};
var _user$project$Register$submitCmd = F2(
	function (model, api_url) {
		return A3(
			_elm_lang$core$Task$perform,
			_user$project$Register$SubmitFail,
			_user$project$Register$SubmitSuccess,
			A2(_user$project$Register$registerUser, model, api_url));
	});
var _user$project$Register$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'SetPassword':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{password: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetConfirmPassword':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirm_password: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SubmitForm':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Register$submitCmd, model, _user$project$Register$register_url)
				};
			case 'SubmitFail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							password: '',
							confirm_password: '',
							message: _elm_lang$core$Basics$toString(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SubmitSuccess':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							password: '',
							confirm_password: '',
							message: A2(_elm_lang$core$Basics_ops['++'], _p0._0._0, _p0._0._1)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{password: '', confirm_password: '', message: 'Check Required Fields'}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Register$SubmitForm = {ctor: 'SubmitForm'};
var _user$project$Register$SetConfirmPassword = function (a) {
	return {ctor: 'SetConfirmPassword', _0: a};
};
var _user$project$Register$SetPassword = function (a) {
	return {ctor: 'SetPassword', _0: a};
};
var _user$project$Register$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h2,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Gooble Gobble')
					])),
				_user$project$Navigation$navigation_bar,
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Register')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$label,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$for('password_field')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Password ')
							])),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('password_field'),
								_elm_lang$html$Html_Attributes$type$('password'),
								_elm_lang$html$Html_Attributes$placeholder('Enter Password'),
								_elm_lang$html$Html_Attributes$required(true),
								_elm_lang$html$Html_Attributes$value(model.password),
								_elm_lang$html$Html_Events$onInput(_user$project$Register$SetPassword)
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						_user$project$Register$validate_password(model),
						A2(
						_elm_lang$html$Html$br,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$label,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$for('confirm_field')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Confirm Password ')
							])),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('confirm_field'),
								_elm_lang$html$Html_Attributes$type$('password'),
								_elm_lang$html$Html_Attributes$placeholder('Confirm Password'),
								_elm_lang$html$Html_Attributes$required(true),
								_elm_lang$html$Html_Attributes$value(model.confirm_password),
								_elm_lang$html$Html_Events$onInput(_user$project$Register$SetConfirmPassword)
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						_user$project$Register$validate_confirm(model),
						A2(
						_elm_lang$html$Html$br,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								_user$project$Register$valid_inputs(model) ? _user$project$Register$SubmitForm : _user$project$Register$SetInputState)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Register')
							]))
					])),
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.message)
					]))
			]));
};
var _user$project$Register$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Register$init, view: _user$project$Register$view, update: _user$project$Register$update, subscriptions: _user$project$Register$subscriptions})
};
